name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Make release tarball
        run: |
          set -euo pipefail
          RELEASE="/tmp/release-${GITHUB_SHA}.tgz"
          # Обязательно: compose.yml должен быть в репо
          test -e compose.yml || { echo "compose.yml not found"; exit 1; }
          # Собираем архив из нужных путей (без .git/.github/venv/node_modules)
          tar -czf "$RELEASE" \
            --exclude=.git --exclude=.github --exclude=.venv --exclude=node_modules \
            backend docs compose.yml compose.dev.yml || true
          ls -lh "$RELEASE"

      - name: Upload tarball to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          fingerprint: ${{ secrets.SSH_FINGERPRINT }}
          source: "/tmp/release-${{ github.sha }}.tgz"
          target: "/tmp"
          overwrite: true
          rm: false
          debug: true

      - name: Deploy on VPS
        uses: appleboy/ssh-action@v1.0.3
        env:
          SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          fingerprint: ${{ secrets.SSH_FINGERPRINT }}
          script: |
            set -euo pipefail

            APP_DIR="/opt/kitchen"
            TARBALL="/tmp/release-$SHA.tgz"
            BACKUP="/opt/kitchen.bak.$(date +%Y%m%d-%H%M%S)"

            echo "→ Бэкапим текущую папку в $BACKUP"
            cp -a "$APP_DIR" "$BACKUP"

            # Функция отката, если что-то пойдёт не так
            rollback() {
              echo "!! Ошибка. Откат до бэкапа"
              rm -rf "$APP_DIR"
              mv "$BACKUP" "$APP_DIR"
              exit 1
            }
            trap 'rollback' ERR

            echo "→ Чистим и раскладываем новый релиз"
            rm -rf "$APP_DIR"/*
            tar -xzf "$TARBALL" -C "$APP_DIR"

            # Если .env хранится на сервере — вернём его в корень проекта
            if [ -f "$BACKUP/.env" ]; then
              cp "$BACKUP/.env" "$APP_DIR/.env"
            fi

            cd "$APP_DIR"
            echo "→ docker compose up -d --build"
            docker compose up -d --build

            echo "→ Ждём БД и прогоняем миграции"
            until docker compose exec -T db bash -lc 'pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h localhost'; do sleep 1; done
            docker compose exec -T api alembic upgrade head || docker compose run --rm api alembic upgrade head

            echo "→ Healthcheck API"
            curl -fsS http://127.0.0.1:8000/docs >/dev/null

            echo "→ Удаляем бэкап (успешно отработали)"
            rm -rf "$BACKUP"

            echo "✅ Деплой завершён"
